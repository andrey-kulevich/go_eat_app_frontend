[{"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\index.tsx":"1","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\App.tsx":"3","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\UserProvider.ts":"4","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\store\\UserMob.ts":"5","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\CustomThemeProvider.ts":"6","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useRoutes.tsx":"7","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useHttp.ts":"8","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\paths.ts":"9","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\HomePage.tsx":"10","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\LoginPage.tsx":"11","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\WaitingPage.tsx":"12","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\requests.ts":"13","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\CustomSnackbar.tsx":"14","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\Header.tsx":"15","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\ExitBtn.tsx":"16"},{"size":480,"mtime":1609190110203,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":460,"mtime":1609179805405,"results":"20","hashOfConfig":"18"},{"size":197,"mtime":1609190110161,"results":"21","hashOfConfig":"18"},{"size":1018,"mtime":1609244306234,"results":"22","hashOfConfig":"18"},{"size":314,"mtime":1609197422743,"results":"23","hashOfConfig":"18"},{"size":798,"mtime":1609691624487,"results":"24","hashOfConfig":"18"},{"size":1060,"mtime":1609249480371,"results":"25","hashOfConfig":"18"},{"size":220,"mtime":1609197236374,"results":"26","hashOfConfig":"18"},{"size":9928,"mtime":1609690997520,"results":"27","hashOfConfig":"18"},{"size":4709,"mtime":1609690997541,"results":"28","hashOfConfig":"18"},{"size":822,"mtime":1609180849315,"results":"29","hashOfConfig":"18"},{"size":3436,"mtime":1609186382838,"results":"30","hashOfConfig":"18"},{"size":777,"mtime":1609181150594,"results":"31","hashOfConfig":"18"},{"size":1955,"mtime":1609225918645,"results":"32","hashOfConfig":"18"},{"size":2154,"mtime":1609687823952,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"umqtzy",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\index.tsx",[],["70","71"],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\App.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\UserProvider.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\store\\UserMob.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\CustomThemeProvider.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useRoutes.tsx",["72","73","74"],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useHttp.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\paths.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\HomePage.tsx",["75","76","77","78","79","80","81"],"import React, {ChangeEvent, useContext, useEffect, useState} from \"react\";\r\nimport Header from \"../components/Header/Header\";\r\nimport {\r\n    Container, createStyles, Typography, Grid, Checkbox, TextField,\r\n    Paper, FormControlLabel, FormControl, InputLabel, Select, MenuItem,\r\n    TableCell, TableBody, TableHead, TableContainer, TableRow, Table, Button\r\n} from \"@material-ui/core\";\r\nimport {observer, useObserver} from \"mobx-react-lite\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {UserContext} from \"../context/UserProvider\";\r\nimport {useHttp} from \"../hooks/useHttp\";\r\nimport {requests} from \"../helpers/requests\";\r\nimport {InvitationInterface} from \"../interfaces/InvitationInterface\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport {UserInterface} from \"../interfaces/UserInterface\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxHeight: 500,\r\n            minHeight: 300,\r\n            backgroundColor: theme.palette.background.paper,\r\n            overflow: 'auto',\r\n        },\r\n        paper: {\r\n            margin: theme.spacing(5, 0),\r\n            minHeight: 300,\r\n            padding: theme.spacing(2)\r\n        },\r\n        grid: {\r\n            marginBottom: theme.spacing(2)\r\n        },\r\n        gridFilters: {\r\n            marginBottom: theme.spacing(2),\r\n            marginLeft: theme.spacing(2)\r\n        },\r\n        emptyText: {\r\n            textAlign: 'center',\r\n            color: theme.palette.text.disabled\r\n        },\r\n        formControl: {\r\n            paddingBottom: '24px',\r\n            marginLeft: theme.spacing(2),\r\n            marginRight: theme.spacing(2),\r\n            minWidth: 195,\r\n            width: '10%'\r\n        },\r\n        valueField: {\r\n            marginRight: theme.spacing(3),\r\n        },\r\n        submit: {\r\n\r\n        }\r\n    }),\r\n);\r\n\r\nexport const HomePage = (user: {user:UserInterface}) => {\r\n    const classes = useStyles();\r\n    const {request} = useHttp()\r\n    const [invitations, setInvitations] = useState<InvitationInterface[]>([])\r\n    const [filterOn, setFilterOn] = useState<string>('country')\r\n    const [filterValue, setFilterValue] = useState<string>('Россия')\r\n    const [update, setUpdate] = useState<boolean>(true)\r\n    const [isBySender, setIsBySender] = useState<boolean>(false)\r\n    const [isByRecipient, setIsByRecipient] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        if (!isByRecipient && !isBySender) {\r\n            request(requests.getInvitationsByLocation.url(filterOn, filterValue),\r\n                requests.getInvitationsByLocation.method, null)\r\n                .then(data => {setInvitations(data as InvitationInterface[])})\r\n        } else if (isBySender) {\r\n            request(requests.getInvitationsMadeByPerson.url(user.user.id), requests.getPersonalInvitations.method, null)\r\n                .then(data => {setInvitations(data as InvitationInterface[])})\r\n        } else if (isByRecipient) {\r\n            request(requests.getPersonalInvitations.url(user.user.id), requests.getPersonalInvitations.method, null)\r\n                .then(data => {setInvitations(data as InvitationInterface[])})\r\n        }\r\n\r\n        setUpdate(false)\r\n    }, [update])\r\n\r\n    const handleFilterChange = (event: ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        setFilterOn(event.target.value as string)\r\n    }\r\n\r\n    const handleFilterValueChange = (event : ChangeEvent<HTMLInputElement>) => {\r\n        setFilterValue(event.target.value as string)\r\n    }\r\n\r\n    return useObserver(() => (\r\n        <>\r\n            <Header/>\r\n            <Container>\r\n                <Paper className={classes.paper} elevation={5}>\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        spacing={2}\r\n                        className={classes.grid}\r\n                    >\r\n                        <Grid item> <Typography variant={\"h5\"}> Список приглашений </Typography> </Grid>\r\n                        <Grid item> </Grid>\r\n                    </Grid>\r\n                    <Typography variant={\"h6\"} className={classes.gridFilters}> Фильтры </Typography>\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        className={classes.gridFilters}>\r\n                        <FormControlLabel\r\n                            control={<Checkbox\r\n                                checked={isBySender}\r\n                                onChange={()=>{\r\n                                    setIsBySender(!isBySender)\r\n                                    setIsByRecipient(false)\r\n                                }}\r\n                                color={\"primary\"}\r\n                            />}\r\n                            label=\"Опубликованные мной\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Checkbox\r\n                                checked={isByRecipient}\r\n                                onChange={()=>{\r\n                                    setIsByRecipient(!isByRecipient)\r\n                                    setIsBySender(false)\r\n                                }}\r\n                                color={\"primary\"}\r\n                            />}\r\n                            label=\"Приглашения для меня\"\r\n                        />\r\n                        <FormControl className={classes.formControl} disabled={isByRecipient || isBySender}>\r\n                            <InputLabel id=\"demo-simple-select-label\">Фильтровать по</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                value={filterOn}\r\n                                onChange={handleFilterChange}\r\n                            >\r\n                                <MenuItem key={1} value={'country'}>Страна</MenuItem>\r\n                                <MenuItem key={2} value={'region'}>Область</MenuItem>\r\n                                <MenuItem key={3} value={'town'}>Город</MenuItem>\r\n                                <MenuItem key={4} value={'street'}>Улица</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <TextField\r\n                            label=\"Значение\"\r\n                            value={filterValue}\r\n                            disabled={isByRecipient || isBySender}\r\n                            className={classes.valueField}\r\n                            onChange={handleFilterValueChange}\r\n                        />\r\n                        <Button\r\n                            color={'primary'}\r\n                            onClick={()=>setUpdate(true)}\r\n                            className={classes.submit}\r\n                        >\r\n                            Обновить\r\n                        </Button>\r\n                    </Grid>\r\n                    <TableContainer >\r\n                        <Table size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Дата</TableCell>\r\n                                    <TableCell>Место</TableCell>\r\n                                    <TableCell>Кто платит</TableCell>\r\n                                    <TableCell>Сообщение</TableCell>\r\n                                    <TableCell>Создатель</TableCell>\r\n                                    <TableCell>Получатель</TableCell>\r\n                                    <TableCell>Принято</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {invitations.length > 0 ?\r\n                                    (invitations.map((elem, index) => (\r\n                                        <TableRow key={index} hover={true} onClick={()=>alert(index)}>\r\n                                            <TableCell>{elem.dateTime}</TableCell>\r\n                                            <TableCell>{elem.place.name}</TableCell>\r\n                                            <TableCell>{elem.whoWillPay === 1 ?'создатель':'получатель'}</TableCell>\r\n                                            <TableCell>{elem.message}</TableCell>\r\n                                            <TableCell>{elem.sender}</TableCell>\r\n                                            <TableCell>{elem.recipient}</TableCell>\r\n                                            <TableCell>\r\n                                                {elem.accepted ? <CheckCircleIcon color=\"primary\"/> : ''}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )))\r\n                                    :\r\n                                    <Typography variant={\"h6\"} className={classes.gridFilters}>\r\n                                        Упс! Ничего не найдено!\r\n                                    </Typography>\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Paper>\r\n            </Container>\r\n        </>\r\n    ))\r\n}\r\n","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\LoginPage.tsx",["82","83"],"import React, {ChangeEvent, useContext, useState} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport EmojiFoodBeverageIcon from '@material-ui/icons/EmojiFoodBeverage';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {routes} from \"../helpers/paths\";\r\nimport {useHttp} from \"../hooks/useHttp\";\r\nimport {requests} from \"../helpers/requests\";\r\nimport CustomSnackbar from \"../components/CustomSnackbar\";\r\nimport {UserContext} from \"../context/UserProvider\";\r\nimport {UserInterface} from \"../interfaces/UserInterface\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n        color:'#fff'\r\n    },\r\n}));\r\n\r\nexport default function LoginPage() {\r\n    const classes = useStyles();\r\n    const {clearError, request, loading, error} = useHttp()\r\n    const [login, setLogin] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const {user, setIsAuth, setUser} = useContext(UserContext)\r\n    const history = useHistory()\r\n\r\n    const handleSubmit = async (event: React.FormEvent<EventTarget>) => {\r\n        event.preventDefault()\r\n        try {\r\n            await request(requests.login.url(login, password), requests.login.method, null)\r\n                .then(data => {\r\n                    setUser(data)\r\n                    localStorage.setItem('isAuth', 'true')\r\n                    localStorage.setItem('user', JSON.stringify(data))\r\n                    setIsAuth(true)\r\n                })\r\n            history.push(routes.toHome)\r\n        } catch (e) {}\r\n    }\r\n\r\n    const handleChangeLogin = (event : ChangeEvent<HTMLInputElement>) => {\r\n        setLogin(event.target.value)\r\n    }\r\n\r\n    const handleChangePassword = (event : ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <EmojiFoodBeverageIcon fontSize=\"large\"/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Go Eat App!\r\n                </Typography>\r\n                <form\r\n                    className={classes.form}\r\n                    noValidate\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"login\"\r\n                        label=\"Логин\"\r\n                        name=\"login\"\r\n                        autoComplete=\"login\"\r\n                        autoFocus\r\n                        onChange={handleChangeLogin}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Пароль\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        onChange={handleChangePassword}\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={loading}\r\n                        className={classes.submit}\r\n                    >\r\n                        Войти\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n            <CustomSnackbar\r\n                open={Boolean(error)}\r\n                handleClose={clearError}\r\n                message={\"Неверный логин или пароль!\"}\r\n                kind={\"error\"}\r\n            />\r\n        </Container>\r\n    );\r\n}","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\WaitingPage.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\requests.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\CustomSnackbar.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\ExitBtn.tsx",["84"],"import React, {useContext} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\r\nimport {UserContext} from \"../../context/UserProvider\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {routes} from \"../../helpers/paths\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        btn:{\r\n            color:'#fff'\r\n        }\r\n    }),\r\n);\r\n\r\nexport const ExitBtn = () => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useStyles()\r\n    const history = useHistory()\r\n    const {setIsAuth} = useContext(UserContext)\r\n\r\n    const handleClickOpen = () => {setOpen(true);};\r\n\r\n    const handleClose = () => {setOpen(false);};\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                color=\"inherit\"\r\n                className={classes.btn}\r\n                onClick={handleClickOpen}\r\n            >\r\n                Выйти\r\n            </Button>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Вы уверены, что хотите выйти из аккуаунта?\"}</DialogTitle>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Нет\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            localStorage.clear()\r\n                            history.push(routes.toLogin)\r\n                            }\r\n                        }\r\n                        color=\"primary\"\r\n                        autoFocus\r\n                    >\r\n                        Да\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n",{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":2,"column":25,"nodeType":"91","messageId":"92","endLine":2,"endColumn":33},{"ruleId":"89","severity":1,"message":"93","line":7,"column":9,"nodeType":"91","messageId":"92","endLine":7,"endColumn":20},{"ruleId":"89","severity":1,"message":"94","line":14,"column":12,"nodeType":"91","messageId":"92","endLine":14,"endColumn":19},{"ruleId":"89","severity":1,"message":"95","line":1,"column":29,"nodeType":"91","messageId":"92","endLine":1,"endColumn":39},{"ruleId":"89","severity":1,"message":"96","line":8,"column":9,"nodeType":"91","messageId":"92","endLine":8,"endColumn":17},{"ruleId":"89","severity":1,"message":"97","line":10,"column":9,"nodeType":"91","messageId":"92","endLine":10,"endColumn":20},{"ruleId":"89","severity":1,"message":"98","line":14,"column":8,"nodeType":"91","messageId":"92","endLine":14,"endColumn":19},{"ruleId":"89","severity":1,"message":"99","line":15,"column":8,"nodeType":"91","messageId":"92","endLine":15,"endColumn":21},{"ruleId":"89","severity":1,"message":"100","line":16,"column":8,"nodeType":"91","messageId":"92","endLine":16,"endColumn":14},{"ruleId":"101","severity":1,"message":"102","line":86,"column":8,"nodeType":"103","endLine":86,"endColumn":16,"suggestions":"104"},{"ruleId":"89","severity":1,"message":"105","line":16,"column":9,"nodeType":"91","messageId":"92","endLine":16,"endColumn":22},{"ruleId":"89","severity":1,"message":"106","line":45,"column":12,"nodeType":"91","messageId":"92","endLine":45,"endColumn":16},{"ruleId":"89","severity":1,"message":"107","line":23,"column":12,"nodeType":"91","messageId":"92","endLine":23,"endColumn":21},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'WaitingPage' is defined but never used.","'loading' is assigned a value but never used.","'useContext' is defined but never used.","'observer' is defined but never used.","'UserContext' is defined but never used.","'DialogTitle' is defined but never used.","'DialogActions' is defined but never used.","'Dialog' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterOn', 'filterValue', 'isByRecipient', 'isBySender', 'request', and 'user.user.id'. Either include them or remove the dependency array.","ArrayExpression",["110"],"'UserInterface' is defined but never used.","'user' is assigned a value but never used.","'setIsAuth' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},"Update the dependencies array to be: [filterOn, filterValue, isByRecipient, isBySender, request, update, user.user.id]",{"range":"113","text":"114"},[3432,3440],"[filterOn, filterValue, isByRecipient, isBySender, request, update, user.user.id]"]