[{"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\index.tsx":"1","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\App.tsx":"3","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\UserProvider.ts":"4","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\store\\UserMob.ts":"5","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\CustomThemeProvider.ts":"6","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useRoutes.tsx":"7","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useHttp.ts":"8","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\paths.ts":"9","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\HomePage.tsx":"10","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\LoginPage.tsx":"11","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\WaitingPage.tsx":"12","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\requests.ts":"13","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\CustomSnackbar.tsx":"14","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\Header.tsx":"15","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\ExitBtn.tsx":"16","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\UserPage.tsx":"17","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\HomePage\\AddInvitation.tsx":"18"},{"size":480,"mtime":1609190110203,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":460,"mtime":1609179805405,"results":"22","hashOfConfig":"20"},{"size":197,"mtime":1609190110161,"results":"23","hashOfConfig":"20"},{"size":1018,"mtime":1609244306234,"results":"24","hashOfConfig":"20"},{"size":314,"mtime":1609197422743,"results":"25","hashOfConfig":"20"},{"size":1332,"mtime":1609776541150,"results":"26","hashOfConfig":"20"},{"size":1060,"mtime":1610104745039,"results":"27","hashOfConfig":"20"},{"size":194,"mtime":1609770613232,"results":"28","hashOfConfig":"20"},{"size":10436,"mtime":1610024756327,"results":"29","hashOfConfig":"20"},{"size":4693,"mtime":1609774136160,"results":"30","hashOfConfig":"20"},{"size":822,"mtime":1609180849315,"results":"31","hashOfConfig":"20"},{"size":3814,"mtime":1610054547233,"results":"32","hashOfConfig":"20"},{"size":777,"mtime":1609181150594,"results":"33","hashOfConfig":"20"},{"size":1788,"mtime":1609880225737,"results":"34","hashOfConfig":"20"},{"size":2154,"mtime":1609687823952,"results":"35","hashOfConfig":"20"},{"size":7021,"mtime":1609775721881,"results":"36","hashOfConfig":"20"},{"size":14936,"mtime":1610122569592,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"umqtzy",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\index.tsx",[],["82","83"],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\App.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\UserProvider.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\store\\UserMob.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\CustomThemeProvider.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useRoutes.tsx",["84","85"],"import React, {useContext, useEffect} from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport {routes} from \"../helpers/paths\";\r\nimport {HomePage} from \"../pages/HomePage\";\r\nimport Login from \"../pages/LoginPage\";\r\nimport {UserPage} from \"../pages/UserPage\";\r\nimport {UserContext} from \"../context/UserProvider\";\r\nimport {useObserver} from \"mobx-react-lite\";\r\nimport {useHttp} from \"./useHttp\";\r\nimport {requests} from \"../helpers/requests\";\r\n\r\nexport const useRoutes = () => {\r\n\r\n    const {user, isAuth, setUser, setIsAuth} = useContext(UserContext)\r\n    const {request} = useHttp()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            request(requests.login.url(localStorage.getItem('login') as string,\r\n                localStorage.getItem('password') as string), requests.login.method, null)\r\n                .then(data => {\r\n                    setUser(data)\r\n                    setIsAuth(true)\r\n                })\r\n        } catch (e) {}\r\n    }, [])\r\n\r\n    return useObserver(() => (\r\n        <Switch>\r\n            <Route exact path={routes.toHome}> <HomePage user={user}/> </Route>\r\n            <Route exact path={routes.toLogin}> <Login/> </Route>\r\n            <Route exact path={routes.userPage}> <UserPage/>  </Route>\r\n            <Redirect to={routes.toHome}/>\r\n        </Switch>\r\n    ))\r\n}\r\n","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useHttp.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\paths.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\HomePage.tsx",["86","87","88","89"],"import React, {ChangeEvent, useContext, useEffect, useState} from \"react\";\r\nimport Header from \"../components/Header/Header\";\r\nimport {\r\n    Container, createStyles, Typography, Grid, Checkbox, TextField,\r\n    Paper, FormControlLabel, FormControl, InputLabel, Select, MenuItem,\r\n    TableCell, TableBody, TableHead, TableContainer, TableRow, Table, Button\r\n} from \"@material-ui/core\";\r\nimport {observer, useObserver} from \"mobx-react-lite\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {UserContext} from \"../context/UserProvider\";\r\nimport {useHttp} from \"../hooks/useHttp\";\r\nimport {requests} from \"../helpers/requests\";\r\nimport {InvitationInterface} from \"../interfaces/InvitationInterface\";\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport {UserInterface} from \"../interfaces/UserInterface\";\r\nimport {AddInvitation} from '../components/HomePage/AddInvitation';\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxHeight: 500,\r\n            minHeight: 300,\r\n            backgroundColor: theme.palette.background.paper,\r\n            overflow: 'auto',\r\n        },\r\n        paper: {\r\n            margin: theme.spacing(5, 0),\r\n            minHeight: 300,\r\n            padding: theme.spacing(2)\r\n        },\r\n        grid: {\r\n            marginBottom: theme.spacing(2)\r\n        },\r\n        gridFilters: {\r\n            marginBottom: theme.spacing(2),\r\n            marginLeft: theme.spacing(2)\r\n        },\r\n        emptyText: {\r\n            textAlign: 'center',\r\n            color: theme.palette.text.disabled\r\n        },\r\n        formControl: {\r\n            paddingBottom: '24px',\r\n            marginLeft: theme.spacing(2),\r\n            marginRight: theme.spacing(2),\r\n            minWidth: 195,\r\n            width: '10%'\r\n        },\r\n        valueField: {\r\n            marginRight: theme.spacing(3),\r\n        },\r\n        submit: {\r\n\r\n        }\r\n    }),\r\n);\r\n\r\nexport const HomePage = (user: {user:UserInterface}) => {\r\n    const classes = useStyles();\r\n    const {request} = useHttp()\r\n    const [invitations, setInvitations] = useState<InvitationInterface[]>([])\r\n    const [filterOn, setFilterOn] = useState<string>('country')\r\n    const [filterValue, setFilterValue] = useState<string>('Россия')\r\n    const [update, setUpdate] = useState<boolean>(true)\r\n    const [isBySender, setIsBySender] = useState<boolean>(false)\r\n    const [isByRecipient, setIsByRecipient] = useState<boolean>(false)\r\n    const [open, setOpen] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        if (!isByRecipient && !isBySender) {\r\n            request(requests.getInvitationsByLocation.url(filterOn, filterValue),\r\n                requests.getInvitationsByLocation.method, null)\r\n                .then(data => {setInvitations(data as InvitationInterface[])})\r\n        } else if (isBySender) {\r\n            request(requests.getInvitationsMadeByPerson.url(user.user.id), requests.getPersonalInvitations.method, null)\r\n                .then(data => {setInvitations(data as InvitationInterface[])})\r\n        } else if (isByRecipient) {\r\n            request(requests.getPersonalInvitations.url(user.user.id), requests.getPersonalInvitations.method, null)\r\n                .then(data => {setInvitations(data as InvitationInterface[])})\r\n        }\r\n\r\n        setUpdate(false)\r\n    }, [update, open])\r\n\r\n    const handleFilterChange = (event: ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        setFilterOn(event.target.value as string)\r\n    }\r\n\r\n    const handleFilterValueChange = (event : ChangeEvent<HTMLInputElement>) => {\r\n        setFilterValue(event.target.value as string)\r\n    }\r\n\r\n    return useObserver(() => (\r\n        <>\r\n            <Header/>\r\n            <Container>\r\n                <Paper className={classes.paper} elevation={5}>\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        spacing={2}\r\n                        className={classes.grid}\r\n                    >\r\n                        <Grid item> <Typography variant={\"h5\"}> Список приглашений </Typography> </Grid>\r\n                        <Grid item>\r\n                            <Fab\r\n                                color=\"primary\"\r\n                                aria-label=\"add\"\r\n                                onClick={() => setOpen(true)}\r\n                                size={\"small\"}\r\n                            >\r\n                                <AddIcon />\r\n                            </Fab>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography variant={\"h6\"} className={classes.gridFilters}> Фильтры </Typography>\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        className={classes.gridFilters}>\r\n                        <FormControlLabel\r\n                            control={<Checkbox\r\n                                checked={isBySender}\r\n                                onChange={()=>{\r\n                                    setIsBySender(!isBySender)\r\n                                    setIsByRecipient(false)\r\n                                }}\r\n                                color={\"primary\"}\r\n                            />}\r\n                            label=\"Опубликованные мной\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Checkbox\r\n                                checked={isByRecipient}\r\n                                onChange={()=>{\r\n                                    setIsByRecipient(!isByRecipient)\r\n                                    setIsBySender(false)\r\n                                }}\r\n                                color={\"primary\"}\r\n                            />}\r\n                            label=\"Приглашения для меня\"\r\n                        />\r\n                        <FormControl className={classes.formControl} disabled={isByRecipient || isBySender}>\r\n                            <InputLabel id=\"demo-simple-select-label\">Фильтровать по</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                value={filterOn}\r\n                                onChange={handleFilterChange}\r\n                            >\r\n                                <MenuItem key={1} value={'country'}>Страна</MenuItem>\r\n                                <MenuItem key={2} value={'region'}>Область</MenuItem>\r\n                                <MenuItem key={3} value={'town'}>Город</MenuItem>\r\n                                <MenuItem key={4} value={'street'}>Улица</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <TextField\r\n                            label=\"Значение\"\r\n                            value={filterValue}\r\n                            disabled={isByRecipient || isBySender}\r\n                            className={classes.valueField}\r\n                            onChange={handleFilterValueChange}\r\n                        />\r\n                        <Button\r\n                            color={'primary'}\r\n                            onClick={()=>setUpdate(true)}\r\n                            className={classes.submit}\r\n                        >\r\n                            Обновить\r\n                        </Button>\r\n                    </Grid>\r\n                    <TableContainer >\r\n                        <Table size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Дата</TableCell>\r\n                                    <TableCell>Место</TableCell>\r\n                                    <TableCell>Кто платит</TableCell>\r\n                                    <TableCell>Сообщение</TableCell>\r\n                                    <TableCell>Создатель</TableCell>\r\n                                    <TableCell>Получатель</TableCell>\r\n                                    <TableCell>Принято</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {invitations.length > 0 ?\r\n                                    (invitations.map((elem, index) => (\r\n                                        <TableRow key={index} hover={true} onClick={()=>alert(index)}>\r\n                                            <TableCell>{elem.dateTime}</TableCell>\r\n                                            <TableCell>{elem.place.name}</TableCell>\r\n                                            <TableCell>{elem.whoWillPay === 1 ?'создатель':'получатель'}</TableCell>\r\n                                            <TableCell>{elem.message}</TableCell>\r\n                                            <TableCell>{elem.sender}</TableCell>\r\n                                            <TableCell>{elem.recipient}</TableCell>\r\n                                            <TableCell>\r\n                                                {elem.accepted ? <CheckCircleIcon color=\"primary\"/> : ''}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )))\r\n                                    :\r\n                                    <Typography variant={\"h6\"} className={classes.gridFilters}>\r\n                                        Упс! Ничего не найдено!\r\n                                    </Typography>\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Paper>\r\n                <AddInvitation open={open} onClose={() => setOpen(false)}/>\r\n            </Container>\r\n        </>\r\n    ))\r\n}\r\n","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\LoginPage.tsx",["90"],"import React, {ChangeEvent, useContext, useState} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport EmojiFoodBeverageIcon from '@material-ui/icons/EmojiFoodBeverage';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {routes} from \"../helpers/paths\";\r\nimport {useHttp} from \"../hooks/useHttp\";\r\nimport {requests} from \"../helpers/requests\";\r\nimport CustomSnackbar from \"../components/CustomSnackbar\";\r\nimport {UserContext} from \"../context/UserProvider\";\r\nimport {UserInterface} from \"../interfaces/UserInterface\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n        color:'#fff'\r\n    },\r\n}));\r\n\r\nexport default function LoginPage() {\r\n    const classes = useStyles();\r\n    const {clearError, request, loading, error} = useHttp()\r\n    const [login, setLogin] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const {setIsAuth, setUser} = useContext(UserContext)\r\n    const history = useHistory()\r\n\r\n    const handleSubmit = async (event: React.FormEvent<EventTarget>) => {\r\n        event.preventDefault()\r\n        try {\r\n            await request(requests.login.url(login, password), requests.login.method, null)\r\n                .then(data => {\r\n                    setUser(data)\r\n                    setIsAuth(true)\r\n                })\r\n            history.push(routes.toHome)\r\n        } catch (e) {}\r\n    }\r\n\r\n    const handleChangeLogin = (event : ChangeEvent<HTMLInputElement>) => {\r\n        setLogin(event.target.value)\r\n    }\r\n\r\n    const handleChangePassword = (event : ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <EmojiFoodBeverageIcon fontSize=\"large\"/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Go Eat App!\r\n                </Typography>\r\n                <form\r\n                    className={classes.form}\r\n                    noValidate\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"login\"\r\n                        label=\"Логин\"\r\n                        name=\"login\"\r\n                        autoComplete=\"login\"\r\n                        autoFocus\r\n                        onChange={handleChangeLogin}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Пароль\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        onChange={handleChangePassword}\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={loading}\r\n                        className={classes.submit}\r\n                    >\r\n                        Войти\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n            <CustomSnackbar\r\n                open={Boolean(error)}\r\n                handleClose={clearError}\r\n                message={\"Неверный логин или пароль!\"}\r\n                kind={\"error\"}\r\n            />\r\n        </Container>\r\n    );\r\n}","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\WaitingPage.tsx",[],["91","92"],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\requests.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\CustomSnackbar.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\ExitBtn.tsx",["93"],"import React, {useContext} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\r\nimport {UserContext} from \"../../context/UserProvider\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {routes} from \"../../helpers/paths\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        btn:{\r\n            color:'#fff'\r\n        }\r\n    }),\r\n);\r\n\r\nexport const ExitBtn = () => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useStyles()\r\n    const history = useHistory()\r\n    const {setIsAuth} = useContext(UserContext)\r\n\r\n    const handleClickOpen = () => {setOpen(true);};\r\n\r\n    const handleClose = () => {setOpen(false);};\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                color=\"inherit\"\r\n                className={classes.btn}\r\n                onClick={handleClickOpen}\r\n            >\r\n                Выйти\r\n            </Button>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Вы уверены, что хотите выйти из аккуаунта?\"}</DialogTitle>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Нет\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            localStorage.clear()\r\n                            history.push(routes.toLogin)\r\n                            }\r\n                        }\r\n                        color=\"primary\"\r\n                        autoFocus\r\n                    >\r\n                        Да\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n",["94","95"],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\UserPage.tsx",["96","97","98","99","100"],"import React, {ChangeEvent, useContext, useEffect, useState} from \"react\";\r\nimport Header from \"../components/Header/Header\";\r\nimport {\r\n    Container, createStyles, Typography, Paper, List, ListItem, Divider, ListItemText, Collapse\r\n} from \"@material-ui/core\";\r\nimport {useObserver} from \"mobx-react-lite\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {UserContext} from \"../context/UserProvider\";\r\nimport {useHttp} from \"../hooks/useHttp\";\r\nimport {requests} from \"../helpers/requests\";\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport {DishInterface} from \"../interfaces/DishInterface\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {UserInterface} from \"../interfaces/UserInterface\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxHeight: 500,\r\n            minHeight: 300,\r\n            backgroundColor: theme.palette.background.paper,\r\n            overflow: 'auto',\r\n        },\r\n        paper: {\r\n            margin: theme.spacing(5, 0),\r\n            minHeight: 300,\r\n            padding: theme.spacing(2)\r\n        },\r\n        nested: {\r\n            paddingLeft: theme.spacing(5),\r\n        },\r\n        nested2: {\r\n            paddingLeft: theme.spacing(10),\r\n        },\r\n        avatar: {\r\n            width: theme.spacing(25),\r\n            height: theme.spacing(25),\r\n        }\r\n    }),\r\n);\r\n\r\nexport const UserPage = () => {\r\n    const classes = useStyles();\r\n    const {request} = useHttp()\r\n    const {user} = useContext(UserContext)\r\n    const [openPreferences, setOpenPreferences] = useState<boolean>(false);\r\n    const [open1, setOpen1] = useState<boolean>(false);\r\n    const [open2, setOpen2] = useState<boolean>(false);\r\n    const [open3, setOpen3] = useState<boolean>(false);\r\n    const [open4, setOpen4] = useState<boolean>(false);\r\n    const [imgSource, setImgSource] = useState('')\r\n\r\n    useEffect(() => {\r\n        fetch(`https://localhost:44399/api/files/${user.avatar}`, {method: 'GET'})\r\n            .then(response => response.blob())\r\n            .then(img => {setImgSource(URL.createObjectURL(img))})\r\n    }, [])\r\n\r\n    const handleFilterChange = (event : ChangeEvent<HTMLInputElement>) => {\r\n\r\n    }\r\n\r\n    const getListItemDish = (dish: DishInterface, text: string, open: boolean, setOpen: any) => {\r\n        return (\r\n            <>\r\n                <ListItem button onClick={()=>setOpen(!open)} className={classes.nested}>\r\n                    <ListItemText><b>{text}</b></ListItemText>\r\n                    {open ? <ExpandLess /> : <ExpandMore />}\r\n                </ListItem>\r\n                {dish !== null && dish !== undefined ?\r\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                    <List component=\"div\" disablePadding>\r\n                        <ListItem className={classes.nested2}>\r\n                            <ListItemText><b>Название:</b> {dish.name}</ListItemText>\r\n                        </ListItem>\r\n                        <ListItem className={classes.nested2}>\r\n                            <ListItemText><b>Тип блюда:</b> {dish.dishType}</ListItemText>\r\n                        </ListItem>\r\n                        <ListItem className={classes.nested2}>\r\n                            <ListItemText><b>Кухня:</b> {dish.cuisineNationality}</ListItemText>\r\n                        </ListItem>\r\n                        <ListItem className={classes.nested2}>\r\n                            <ListItemText><b>Рецепт:</b> {dish.recipe}</ListItemText>\r\n                        </ListItem>\r\n                    </List>\r\n                </Collapse>\r\n                : ''}\r\n            </>\r\n        )\r\n    }\r\n\r\n    return useObserver(() => (\r\n        <>\r\n            <Header/>\r\n            <Container>\r\n                <Paper className={classes.paper} elevation={5}>\r\n                    <Typography variant={\"h4\"}>{user.name}</Typography>\r\n                    <Avatar src={imgSource} alt={'avatar'} className={classes.avatar}/>\r\n                    <List>\r\n                        <ListItem key={0}><ListItemText><b>Возраст:</b> {user.age}</ListItemText></ListItem>\r\n                        <Divider />\r\n                        <ListItem key={1}><ListItemText><b>Пол:</b> {user.gender}</ListItemText></ListItem>\r\n                        <Divider />\r\n                        <ListItem key={2}><ListItemText><b>Статус:</b> {user.status}</ListItemText></ListItem>\r\n                        <Divider />\r\n                        <ListItem key={3} button onClick={()=>setOpenPreferences(!openPreferences)}>\r\n                            <ListItemText><b>Предпочтения</b></ListItemText>\r\n                            {openPreferences ? <ExpandLess /> : <ExpandMore />}\r\n                        </ListItem>\r\n                        <Collapse in={openPreferences} timeout=\"auto\" unmountOnExit>\r\n                            <List component=\"div\" disablePadding>\r\n                                <ListItem className={classes.nested}>\r\n                                    <ListItemText><b>Кухня:</b> {user.preferences.cuisineNationality}</ListItemText>\r\n                                </ListItem>\r\n                                <ListItem className={classes.nested}>\r\n                                    <ListItemText><b>Интерьер:</b> {user.preferences.interior}</ListItemText>\r\n                                </ListItem>\r\n                                <ListItem className={classes.nested}>\r\n                                    <ListItemText><b>Процент чаевых:</b> {user.preferences.tipsPercentage}%</ListItemText>\r\n                                </ListItem>\r\n                                <ListItem className={classes.nested}>\r\n                                    <ListItemText><b>Вегетарианец:</b> {user.preferences.isVegan ? 'да':'нет'}</ListItemText>\r\n                                </ListItem>\r\n                                <ListItem className={classes.nested}>\r\n                                    <ListItemText><b>Сыроед:</b> {user.preferences.isRawFood ? 'да':'нет'}</ListItemText>\r\n                                </ListItem>\r\n                                {getListItemDish(user.preferences.bestDrink, \"Любимый напиток\", open1, setOpen1)}\r\n                                {getListItemDish(user.preferences.bestFirstMeal, \"Любимое первое блюдо\", open2, setOpen2)}\r\n                                {getListItemDish(user.preferences.bestSecondMeal, \"Любимое второе блюдо\", open3, setOpen3)}\r\n                                {getListItemDish(user.preferences.bestDessert, \"Любимый десерт\", open4, setOpen4)}\r\n                            </List>\r\n                        </Collapse>\r\n                    </List>\r\n                </Paper>\r\n            </Container>\r\n        </>\r\n    ))\r\n}\r\n","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\HomePage\\AddInvitation.tsx",["101"],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":14,"column":18,"nodeType":"108","messageId":"109","endLine":14,"endColumn":24},{"ruleId":"110","severity":1,"message":"111","line":26,"column":8,"nodeType":"112","endLine":26,"endColumn":10,"suggestions":"113"},{"ruleId":"106","severity":1,"message":"114","line":1,"column":29,"nodeType":"108","messageId":"109","endLine":1,"endColumn":39},{"ruleId":"106","severity":1,"message":"115","line":8,"column":9,"nodeType":"108","messageId":"109","endLine":8,"endColumn":17},{"ruleId":"106","severity":1,"message":"116","line":10,"column":9,"nodeType":"108","messageId":"109","endLine":10,"endColumn":20},{"ruleId":"110","severity":1,"message":"117","line":87,"column":8,"nodeType":"112","endLine":87,"endColumn":22,"suggestions":"118"},{"ruleId":"106","severity":1,"message":"119","line":16,"column":9,"nodeType":"108","messageId":"109","endLine":16,"endColumn":22},{"ruleId":"102","replacedBy":"120"},{"ruleId":"104","replacedBy":"121"},{"ruleId":"106","severity":1,"message":"122","line":23,"column":12,"nodeType":"108","messageId":"109","endLine":23,"endColumn":21},{"ruleId":"102","replacedBy":"123"},{"ruleId":"104","replacedBy":"124"},{"ruleId":"106","severity":1,"message":"125","line":10,"column":9,"nodeType":"108","messageId":"109","endLine":10,"endColumn":17},{"ruleId":"106","severity":1,"message":"119","line":15,"column":9,"nodeType":"108","messageId":"109","endLine":15,"endColumn":22},{"ruleId":"106","severity":1,"message":"126","line":47,"column":12,"nodeType":"108","messageId":"109","endLine":47,"endColumn":19},{"ruleId":"110","severity":1,"message":"127","line":60,"column":8,"nodeType":"112","endLine":60,"endColumn":10,"suggestions":"128"},{"ruleId":"106","severity":1,"message":"129","line":62,"column":11,"nodeType":"108","messageId":"109","endLine":62,"endColumn":29},{"ruleId":"110","severity":1,"message":"130","line":86,"column":8,"nodeType":"112","endLine":86,"endColumn":16,"suggestions":"131"},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"@typescript-eslint/no-unused-vars","'isAuth' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'request', 'setIsAuth', and 'setUser'. Either include them or remove the dependency array.","ArrayExpression",["134"],"'useContext' is defined but never used.","'observer' is defined but never used.","'UserContext' is defined but never used.","React Hook useEffect has missing dependencies: 'filterOn', 'filterValue', 'isByRecipient', 'isBySender', 'request', and 'user.user.id'. Either include them or remove the dependency array.",["135"],"'UserInterface' is defined but never used.",["132"],["133"],"'setIsAuth' is assigned a value but never used.",["132"],["133"],"'requests' is defined but never used.","'request' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user.avatar'. Either include it or remove the dependency array.",["136"],"'handleFilterChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filterValue', 'request', and 'selectFilterValue'. Either include them or remove the dependency array.",["137"],"no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [request, setIsAuth, setUser]",{"range":"146","text":"147"},"Update the dependencies array to be: [update, open, isByRecipient, isBySender, request, filterOn, filterValue, user.user.id]",{"range":"148","text":"149"},"Update the dependencies array to be: [user.avatar]",{"range":"150","text":"151"},"Update the dependencies array to be: [filterValue, request, selectFilterValue, update]",{"range":"152","text":"153"},[981,983],"[request, setIsAuth, setUser]",[3476,3490],"[update, open, isByRecipient, isBySender, request, filterOn, filterValue, user.user.id]",[2225,2227],"[user.avatar]",[3280,3288],"[filterValue, request, selectFilterValue, update]"]