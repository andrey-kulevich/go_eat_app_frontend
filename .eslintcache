[{"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\index.tsx":"1","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\App.tsx":"3","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\UserProvider.ts":"4","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\store\\UserMob.ts":"5","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\CustomThemeProvider.ts":"6","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useRoutes.tsx":"7","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useHttp.ts":"8","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\paths.ts":"9","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\HomePage.tsx":"10","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\LoginPage.tsx":"11","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\WaitingPage.tsx":"12","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\requests.ts":"13","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\CustomSnackbar.tsx":"14","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\Header.tsx":"15","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\ExitBtn.tsx":"16","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\UserPage.tsx":"17","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\HomePage\\AddInvitation.tsx":"18","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\HomePage\\AcceptInvitation.tsx":"19","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\HomePage\\DeleteInvitation.tsx":"20"},{"size":480,"mtime":1609190110203,"results":"21","hashOfConfig":"22"},{"size":425,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":460,"mtime":1609179805405,"results":"24","hashOfConfig":"22"},{"size":197,"mtime":1609190110161,"results":"25","hashOfConfig":"22"},{"size":1018,"mtime":1609244306234,"results":"26","hashOfConfig":"22"},{"size":314,"mtime":1609197422743,"results":"27","hashOfConfig":"22"},{"size":1332,"mtime":1609776541150,"results":"28","hashOfConfig":"22"},{"size":1060,"mtime":1610225274294,"results":"29","hashOfConfig":"22"},{"size":194,"mtime":1609770613232,"results":"30","hashOfConfig":"22"},{"size":13063,"mtime":1610206133189,"results":"31","hashOfConfig":"22"},{"size":9453,"mtime":1610226702388,"results":"32","hashOfConfig":"22"},{"size":822,"mtime":1609180849315,"results":"33","hashOfConfig":"22"},{"size":4066,"mtime":1610191316083,"results":"34","hashOfConfig":"22"},{"size":777,"mtime":1609181150594,"results":"35","hashOfConfig":"22"},{"size":1788,"mtime":1609880225737,"results":"36","hashOfConfig":"22"},{"size":2154,"mtime":1609687823952,"results":"37","hashOfConfig":"22"},{"size":9499,"mtime":1610229172715,"results":"38","hashOfConfig":"22"},{"size":14936,"mtime":1610122569592,"results":"39","hashOfConfig":"22"},{"size":7026,"mtime":1610194016804,"results":"40","hashOfConfig":"22"},{"size":1257,"mtime":1610200592198,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"umqtzy",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\index.tsx",[],["89","90"],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\App.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\UserProvider.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\store\\UserMob.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\CustomThemeProvider.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useRoutes.tsx",["91","92"],"import React, {useContext, useEffect} from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport {routes} from \"../helpers/paths\";\r\nimport {HomePage} from \"../pages/HomePage\";\r\nimport Login from \"../pages/LoginPage\";\r\nimport {UserPage} from \"../pages/UserPage\";\r\nimport {UserContext} from \"../context/UserProvider\";\r\nimport {useObserver} from \"mobx-react-lite\";\r\nimport {useHttp} from \"./useHttp\";\r\nimport {requests} from \"../helpers/requests\";\r\n\r\nexport const useRoutes = () => {\r\n\r\n    const {user, isAuth, setUser, setIsAuth} = useContext(UserContext)\r\n    const {request} = useHttp()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            request(requests.login.url(localStorage.getItem('login') as string,\r\n                localStorage.getItem('password') as string), requests.login.method, null)\r\n                .then(data => {\r\n                    setUser(data)\r\n                    setIsAuth(true)\r\n                })\r\n        } catch (e) {}\r\n    }, [])\r\n\r\n    return useObserver(() => (\r\n        <Switch>\r\n            <Route exact path={routes.toHome}> <HomePage user={user}/> </Route>\r\n            <Route exact path={routes.toLogin}> <Login/> </Route>\r\n            <Route exact path={routes.userPage}> <UserPage/>  </Route>\r\n            <Redirect to={routes.toHome}/>\r\n        </Switch>\r\n    ))\r\n}\r\n","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useHttp.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\paths.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\HomePage.tsx",["93","94","95","96","97"],"import React, {ChangeEvent, useContext, useEffect, useState} from \"react\";\r\nimport Header from \"../components/Header/Header\";\r\nimport {\r\n    Container, createStyles, Typography, Grid, Checkbox, TextField,\r\n    Paper, FormControlLabel, FormControl, InputLabel, Select, MenuItem,\r\n    TableCell, TableBody, TableHead, TableContainer, TableRow, Table, Button, Tooltip, IconButton\r\n} from \"@material-ui/core\";\r\nimport {observer, useObserver} from \"mobx-react-lite\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {UserContext} from \"../context/UserProvider\";\r\nimport {useHttp} from \"../hooks/useHttp\";\r\nimport {requests} from \"../helpers/requests\";\r\nimport {InvitationInterface} from \"../interfaces/InvitationInterface\";\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport {UserInterface} from \"../interfaces/UserInterface\";\r\nimport {AddInvitation} from '../components/HomePage/AddInvitation';\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {AcceptInvitation} from \"../components/HomePage/AcceptInvitation\";\r\nimport {DeleteInvitation} from \"../components/HomePage/DeleteInvitation\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxHeight: 500,\r\n            minHeight: 300,\r\n            backgroundColor: theme.palette.background.paper,\r\n            overflow: 'auto',\r\n        },\r\n        paper: {\r\n            margin: theme.spacing(5, 0),\r\n            minHeight: 300,\r\n            padding: theme.spacing(2)\r\n        },\r\n        grid: {\r\n            marginBottom: theme.spacing(2)\r\n        },\r\n        gridFilters: {\r\n            marginBottom: theme.spacing(2),\r\n            marginLeft: theme.spacing(2)\r\n        },\r\n        emptyText: {\r\n            textAlign: 'center',\r\n            color: theme.palette.text.disabled\r\n        },\r\n        formControl: {\r\n            paddingBottom: '24px',\r\n            marginLeft: theme.spacing(2),\r\n            marginRight: theme.spacing(2),\r\n            minWidth: 195,\r\n            width: '10%'\r\n        },\r\n        valueField: {\r\n            marginRight: theme.spacing(3),\r\n        },\r\n        delete: {\r\n            padding: 0\r\n        }\r\n    }),\r\n);\r\n\r\nexport const HomePage = (user: {user:UserInterface}) => {\r\n    const classes = useStyles();\r\n    const {request} = useHttp()\r\n    const [invitations, setInvitations] = useState<InvitationInterface[]>([])\r\n    const [filterOn, setFilterOn] = useState<string>('country')\r\n    const [filterValue, setFilterValue] = useState<string>('Россия')\r\n    const [update, setUpdate] = useState<boolean>(true)\r\n    const [isBySender, setIsBySender] = useState<boolean>(false)\r\n    const [isByRecipient, setIsByRecipient] = useState<boolean>(false)\r\n    const [open, setOpen] = useState<boolean>(false)\r\n    const [openAccept, setOpenAccept] = useState<boolean>(false)\r\n    const [selectedInvitation, setSelectedInvitation] = useState<InvitationInterface|null>(null)\r\n    const [openDelete, setOpenDelete] = useState<boolean>(false)\r\n    const [selectedToDelete, setSelectedToDelete] = useState<number>(-1)\r\n\r\n    useEffect(() => {\r\n        if (!isByRecipient && !isBySender) {\r\n            request(requests.getInvitationsByLocation.url(filterOn, filterValue),\r\n                requests.getInvitationsByLocation.method, null)\r\n                .then(data => {setInvitations(data as InvitationInterface[])})\r\n        } else if (isBySender) {\r\n            request(requests.getInvitationsMadeByPerson.url(user.user.id), requests.getPersonalInvitations.method, null)\r\n                .then(data => {setInvitations(data as InvitationInterface[])})\r\n        } else if (isByRecipient) {\r\n            request(requests.getPersonalInvitations.url(user.user.id), requests.getPersonalInvitations.method, null)\r\n                .then(data => {setInvitations(data as InvitationInterface[])})\r\n        }\r\n\r\n        setUpdate(false)\r\n    }, [update])\r\n\r\n    useEffect(() => {\r\n        if (openDelete) setOpenAccept(false)\r\n    }, [openAccept])\r\n\r\n    const handleFilterChange = (event: ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        setFilterOn(event.target.value as string)\r\n    }\r\n\r\n    const handleFilterValueChange = (event : ChangeEvent<HTMLInputElement>) => {\r\n        setFilterValue(event.target.value as string)\r\n    }\r\n\r\n    return useObserver(() => (\r\n        <>\r\n            <Header/>\r\n            <Container>\r\n                <Paper className={classes.paper} elevation={5}>\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        spacing={2}\r\n                        className={classes.grid}\r\n                    >\r\n                        <Grid item> <Typography variant={\"h5\"}> Список приглашений </Typography> </Grid>\r\n                        <Grid item>\r\n                            <Fab\r\n                                color=\"primary\"\r\n                                aria-label=\"add\"\r\n                                onClick={() => setOpen(true)}\r\n                                size={\"small\"}\r\n                            >\r\n                                <AddIcon />\r\n                            </Fab>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography variant={\"h6\"} className={classes.gridFilters}> Фильтры </Typography>\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        className={classes.gridFilters}>\r\n                        <FormControlLabel\r\n                            control={<Checkbox\r\n                                checked={isBySender}\r\n                                onChange={()=>{\r\n                                    setIsBySender(!isBySender)\r\n                                    setIsByRecipient(false)\r\n                                }}\r\n                                color={\"primary\"}\r\n                            />}\r\n                            label=\"Опубликованные мной\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Checkbox\r\n                                checked={isByRecipient}\r\n                                onChange={()=>{\r\n                                    setIsByRecipient(!isByRecipient)\r\n                                    setIsBySender(false)\r\n                                }}\r\n                                color={\"primary\"}\r\n                            />}\r\n                            label=\"Приглашения для меня\"\r\n                        />\r\n                        <FormControl className={classes.formControl} disabled={isByRecipient || isBySender}>\r\n                            <InputLabel id=\"demo-simple-select-label\">Фильтровать по</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                value={filterOn}\r\n                                onChange={handleFilterChange}\r\n                            >\r\n                                <MenuItem key={1} value={'country'}>Страна</MenuItem>\r\n                                <MenuItem key={2} value={'region'}>Область</MenuItem>\r\n                                <MenuItem key={3} value={'town'}>Город</MenuItem>\r\n                                <MenuItem key={4} value={'street'}>Улица</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <TextField\r\n                            label=\"Значение\"\r\n                            value={filterValue}\r\n                            disabled={isByRecipient || isBySender}\r\n                            className={classes.valueField}\r\n                            onChange={handleFilterValueChange}\r\n                        />\r\n                        <Button color={'primary'} onClick={()=>setUpdate(true)}>Обновить</Button>\r\n                    </Grid>\r\n                    <TableContainer >\r\n                        <Table size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Дата</TableCell>\r\n                                    <TableCell>Место</TableCell>\r\n                                    <TableCell>Кто платит</TableCell>\r\n                                    <TableCell>Сообщение</TableCell>\r\n                                    <TableCell>Создатель</TableCell>\r\n                                    <TableCell>Получатель</TableCell>\r\n                                    <TableCell>Принято</TableCell>\r\n                                    <TableCell></TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {invitations.length > 0 ?\r\n                                    (invitations.map((elem, index) => (\r\n                                        <TableRow key={index} hover={true} onClick={() => {\r\n                                            setSelectedInvitation(elem)\r\n                                            setOpenAccept(true)\r\n                                        }}>\r\n                                            <TableCell>{elem.dateTime}</TableCell>\r\n                                            <TableCell>{elem.place.name}</TableCell>\r\n                                            <TableCell>{elem.whoWillPay === 1 ?'создатель':'раздельно'}</TableCell>\r\n                                            <TableCell>{elem.message}</TableCell>\r\n                                            <TableCell>{elem.sender}</TableCell>\r\n                                            <TableCell>{elem.recipient}</TableCell>\r\n                                            <TableCell>\r\n                                                {elem.accepted ? <CheckCircleIcon color=\"primary\"/> : ''}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {elem.senderId === user.user.id ?\r\n                                                    <Tooltip title={\"Удалить приглашение\"}>\r\n                                                        <IconButton\r\n                                                            color={\"secondary\"}\r\n                                                            aria-label=\"delete\"\r\n                                                            className={classes.delete}\r\n                                                            onClick={() => {\r\n                                                                setSelectedToDelete(elem.id)\r\n                                                                setOpenDelete(true)\r\n                                                            }}\r\n                                                        >\r\n                                                            <DeleteIcon />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                    : ''}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )))\r\n                                    :\r\n                                    <Typography variant={\"h6\"} className={classes.gridFilters}>\r\n                                        Упс! Ничего не найдено!\r\n                                    </Typography>\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Paper>\r\n\r\n                <AcceptInvitation\r\n                    invitation={selectedInvitation}\r\n                    open={openAccept}\r\n                    onClose={() => {\r\n                        setOpenAccept(false)\r\n                        setUpdate(true)\r\n                    }}\r\n                />\r\n\r\n                <AddInvitation open={open} onClose={() => {\r\n                    setOpen(false)\r\n                    setUpdate(true)\r\n                }}/>\r\n\r\n                <DeleteInvitation\r\n                    invitationId={selectedToDelete}\r\n                    open={openDelete}\r\n                    onClose={() => {\r\n                        setOpenDelete(false)\r\n                        setUpdate(true)\r\n                    }}\r\n                />\r\n            </Container>\r\n        </>\r\n    ))\r\n}\r\n","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\LoginPage.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\WaitingPage.tsx",[],["98","99"],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\requests.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\CustomSnackbar.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\ExitBtn.tsx",["100"],"import React, {useContext} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\r\nimport {UserContext} from \"../../context/UserProvider\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {routes} from \"../../helpers/paths\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        btn:{\r\n            color:'#fff'\r\n        }\r\n    }),\r\n);\r\n\r\nexport const ExitBtn = () => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useStyles()\r\n    const history = useHistory()\r\n    const {setIsAuth} = useContext(UserContext)\r\n\r\n    const handleClickOpen = () => {setOpen(true);};\r\n\r\n    const handleClose = () => {setOpen(false);};\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                color=\"inherit\"\r\n                className={classes.btn}\r\n                onClick={handleClickOpen}\r\n            >\r\n                Выйти\r\n            </Button>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Вы уверены, что хотите выйти из аккуаунта?\"}</DialogTitle>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Нет\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            localStorage.clear()\r\n                            history.push(routes.toLogin)\r\n                            }\r\n                        }\r\n                        color=\"primary\"\r\n                        autoFocus\r\n                    >\r\n                        Да\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\UserPage.tsx",["101","102","103","104","105"],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\HomePage\\AddInvitation.tsx",["106"],"import React, {ChangeEvent, useContext, useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {\r\n    Checkbox,\r\n    createStyles,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select, Typography\r\n} from \"@material-ui/core\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {requests} from \"../../helpers/requests\";\r\nimport {useHttp} from \"../../hooks/useHttp\";\r\nimport {PlaceInterface} from \"../../interfaces/PlaceInterface\";\r\nimport {UserContext} from \"../../context/UserProvider\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            width: '40%',\r\n            marginRight: theme.spacing(2)\r\n        },\r\n        or: {\r\n            marginTop: theme.spacing(2),\r\n            marginBottom: theme.spacing(2)\r\n        },\r\n        button: {\r\n            padding: 0,\r\n            marginBottom: theme.spacing(2)\r\n        },\r\n        updateButton: {\r\n            height: '80%',\r\n            paddingTop: '20px'\r\n        },\r\n        valueField: {\r\n            flexGrow: 1\r\n        },\r\n        grid: {\r\n            width: '40%',\r\n            marginRight: theme.spacing(2)\r\n        }\r\n    }),\r\n);\r\n\r\nexport const AddInvitation = ({open, onClose } : {open: boolean, onClose: any}) => {\r\n\r\n    const classes = useStyles();\r\n    const {user} = useContext(UserContext)\r\n    const {request} = useHttp()\r\n    const [update, setUpdate] = useState<boolean>(true)\r\n    const [selectFilterValue, setSelectFilterValue] = useState<string>('country')\r\n    const [filterValue, setFilterValue] = useState<string>('Россия')\r\n    const [whoWillPay, setWhoWillPay] = useState<boolean>(false)\r\n    const [dateTime, setDateTime] = useState<string>('')\r\n    const [message, setMessage] = useState<string>('')\r\n    const [login, setLogin] = useState<string>('')\r\n    const [recipientId, setRecipientId] = useState<number>(0)\r\n    //const [isLoginExist, setIsLoginExist] = useState<boolean>(true)\r\n    const [isCreateNewAddress, setIsCreateNewAddress] = useState<boolean>(false)\r\n    const [places, setPlaces] = useState<PlaceInterface[]>([])\r\n    const [selectedPlace, setSelectedPlace] = useState<number>(0)\r\n\r\n    const [country, setCountry] = useState<string>('')\r\n    const [region, setRegion] = useState<string>('')\r\n    const [town, setTown] = useState<string>('')\r\n    const [mailIndex, setMailIndex] = useState<string>('')\r\n    const [street, setStreet] = useState<string>('')\r\n    const [house, setHouse] = useState<string>('')\r\n    const [apartment, setApartment] = useState<string>('')\r\n    const [name, setName] = useState<string>('')\r\n\r\n    useEffect(() => {\r\n        request(requests.getPlacesByLocationAndPreferences\r\n                .url(selectFilterValue, filterValue, 'null', 'null'),\r\n            requests.getPlacesByLocationAndPreferences.method, null)\r\n            .then(data => {setPlaces(data as PlaceInterface[])})\r\n\r\n        setUpdate(false)\r\n    }, [update])\r\n\r\n    const auxiliaryCreate = (selected: number) => {\r\n        if (login === '') {\r\n            request(requests.createInvitation.url, requests.createInvitation.method, {\r\n                \"DateTime\": dateTime,\r\n                \"Address\": selected,\r\n                \"WhoWillPay\": whoWillPay ? 1 : 0,\r\n                \"Message\": message,\r\n                \"SenderId\": user.id,\r\n                \"RecipientId\": -1\r\n            }).then(res => console.log(res))\r\n                .catch(err => console.log(err))\r\n        } else {\r\n            request(requests.createInvitation.url, requests.createInvitation.method, {\r\n                \"DateTime\": dateTime,\r\n                \"Address\": selected,\r\n                \"WhoWillPay\": whoWillPay ? 1 : 0,\r\n                \"Message\": message,\r\n                \"SenderId\": user.id,\r\n                \"RecipientId\": recipientId\r\n            }).then(res => console.log(res))\r\n                .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n    const createInvitation = () => {\r\n        if (isCreateNewAddress) {\r\n            request(requests.createEmptyPlace.url, requests.createEmptyPlace.method, {\r\n                \"Name\": name,\r\n                \"Country\": country,\r\n                \"Region\": region,\r\n                \"Town\": town,\r\n                \"MailIndex\": mailIndex,\r\n                \"Street\": street,\r\n                \"House\": house,\r\n                \"Apartment\": apartment\r\n            }).then(res => auxiliaryCreate(res))\r\n                .catch(err => console.log(err))\r\n        } else {\r\n            auxiliaryCreate(selectedPlace)\r\n        }\r\n        onClose()\r\n    }\r\n\r\n    const handleSetRecipient = (event : ChangeEvent<HTMLInputElement>) => {\r\n        setLogin(event.target.value as string)\r\n\r\n        request(requests.getUserByLogin.url(event.target.value as string),\r\n            requests.getUserByLogin.method, null).then(data => {setRecipientId(data.id)})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Новое приглашение</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"datetime\"\r\n                        label=\"Дата и время встречи\"\r\n                        type=\"datetime-local\"\r\n                        onChange={(e) =>\r\n                            setDateTime(e.target.value.replace('T', ' '))\r\n                        }\r\n                        fullWidth\r\n                    />\r\n\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                    >\r\n                        <FormControl className={classes.formControl} disabled={isCreateNewAddress}>\r\n                            <InputLabel id=\"demo-simple-select-label\">Фильтровать места по</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                value={selectFilterValue}\r\n                                onChange={(e) =>\r\n                                    setSelectFilterValue(e.target.value as string)\r\n                                }\r\n                            >\r\n                                <MenuItem key={1} value={'country'}>Страна</MenuItem>\r\n                                <MenuItem key={2} value={'region'}>Область</MenuItem>\r\n                                <MenuItem key={3} value={'town'}>Город</MenuItem>\r\n                                <MenuItem key={4} value={'street'}>Улица</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <TextField\r\n                            label=\"Значение\"\r\n                            value={filterValue}\r\n                            disabled={isCreateNewAddress}\r\n                            className={classes.valueField}\r\n                            onChange={(e) => setFilterValue(e.target.value)}\r\n                        />\r\n                        <Button\r\n                            color={'primary'}\r\n                            disabled={isCreateNewAddress}\r\n                            onClick={() => setUpdate(true)}\r\n                            className={classes.updateButton}\r\n                        >\r\n                            Обновить\r\n                        </Button>\r\n                    </Grid>\r\n\r\n                    <FormControl className={classes.formControl} disabled={isCreateNewAddress}>\r\n                        <InputLabel id=\"demo-simple-select-label\">Место</InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            id=\"demo-simple-select\"\r\n                            value={selectedPlace}\r\n                            onChange={(e) => setSelectedPlace(e.target.value as number)}\r\n                        >\r\n                            {places.length > 0 ?\r\n                                (places.map(((item, index) =>\r\n                                        <MenuItem key={index} value={item.id}>{item.name}</MenuItem>\r\n                                ))) : ''}\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Typography className={classes.or}>ИЛИ</Typography>\r\n\r\n                    <Button\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        onClick={() => setIsCreateNewAddress(!isCreateNewAddress)}\r\n                    >\r\n                        {isCreateNewAddress ? 'Скрыть' : 'Создать новое место'}\r\n                    </Button>\r\n                    <br/>\r\n\r\n                    {isCreateNewAddress ?\r\n                        <>\r\n                            <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"flex-start\"\r\n                            >\r\n                                <TextField\r\n                                    id=\"name\"\r\n                                    label=\"Название\"\r\n                                    className={classes.grid}\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                />\r\n                                <TextField\r\n                                    id=\"country\"\r\n                                    label=\"Страна\"\r\n                                    className={classes.grid}\r\n                                    value={country}\r\n                                    onChange={(e) => setCountry(e.target.value)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"flex-start\"\r\n                            >\r\n                                <TextField\r\n                                    id=\"region\"\r\n                                    label=\"Область\"\r\n                                    className={classes.grid}\r\n                                    value={region}\r\n                                    onChange={(e) => setRegion(e.target.value)}\r\n                                />\r\n                                <TextField\r\n                                    id=\"town\"\r\n                                    label=\"Город\"\r\n                                    className={classes.grid}\r\n                                    value={town}\r\n                                    onChange={(e) => setTown(e.target.value)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"flex-start\"\r\n                            >\r\n                                <TextField\r\n                                    id=\"mail_index\"\r\n                                    label=\"Почтовый индекс\"\r\n                                    className={classes.grid}\r\n                                    value={mailIndex}\r\n                                    onChange={(e) => setMailIndex(e.target.value)}\r\n                                />\r\n                                <TextField\r\n                                    id=\"street\"\r\n                                    label=\"Улица\"\r\n                                    className={classes.grid}\r\n                                    value={street}\r\n                                    onChange={(e) => setStreet(e.target.value)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"flex-start\"\r\n                            >\r\n                                <TextField\r\n                                    id=\"house\"\r\n                                    label=\"Дом\"\r\n                                    className={classes.grid}\r\n                                    value={house}\r\n                                    onChange={(e) => setHouse(e.target.value)}\r\n                                />\r\n                                <TextField\r\n                                    id=\"apartment\"\r\n                                    label=\"Сектор\"\r\n                                    className={classes.grid}\r\n                                    value={apartment}\r\n                                    onChange={(e) => setApartment(e.target.value)}\r\n                                />\r\n                            </Grid>\r\n                            <br/>\r\n                        </>\r\n                        : ''}\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            checked={whoWillPay}\r\n                            onChange={() => {setWhoWillPay(!whoWillPay)}}\r\n                            color={\"primary\"}\r\n                        />}\r\n                        label=\"Я буду платить\"\r\n                    />\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"message\"\r\n                        label=\"Сообщение\"\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        fullWidth\r\n                    />\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"recipientLogin\"\r\n                        label=\"Логин получателя (необязательное поле)\"\r\n                        value={login}\r\n                        onChange={handleSetRecipient}\r\n                        fullWidth\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => onClose()} color=\"primary\"> Отмена </Button>\r\n                    <Button color=\"primary\" onClick={createInvitation}> Создать </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\HomePage\\AcceptInvitation.tsx",["107"],"import React, {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {Collapse, createStyles, Divider, List, ListItem, ListItemText} from \"@material-ui/core\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {requests} from \"../../helpers/requests\";\r\nimport {useHttp} from \"../../hooks/useHttp\";\r\nimport {InvitationInterface} from \"../../interfaces/InvitationInterface\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport PlaceIcon from '@material-ui/icons/Place';\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        avatar: {\r\n            width: theme.spacing(30),\r\n            height: theme.spacing(30),\r\n        }\r\n    }),\r\n);\r\n\r\nexport const AcceptInvitation = ({invitation, open, onClose } :\r\n                                  {invitation: InvitationInterface|null, open: boolean, onClose: any}) => {\r\n\r\n    const classes = useStyles();\r\n    const {request} = useHttp()\r\n    const [imgSource, setImgSource] = useState('')\r\n    const [openInfo, setOpenInfo] = useState<boolean>(false)\r\n    const [visits, setVisits] = useState<number>(0)\r\n    const [rating, setRating] = useState<number>(-1)\r\n\r\n\r\n    useEffect(() => {\r\n        if (invitation !== null) {\r\n            fetch(`https://localhost:44399/api/files/${invitation.place.photo}`,{method: 'GET'})\r\n                .then(response => response.blob())\r\n                .then(img => {setImgSource(URL.createObjectURL(img))})\r\n\r\n            request(requests.getVisitsCount.url(invitation.place.id), requests.getVisitsCount.method, null)\r\n                .then(data => {setVisits(data)})\r\n            request(requests.getRatingOfPlace.url(invitation.place.id), requests.getRatingOfPlace.method, null)\r\n                .then(data => {setRating(data)})\r\n        }\r\n    }, [open])\r\n\r\n    const handleAcceptInvitation = () => {\r\n        if (invitation !== null)\r\n            request(requests.acceptInvitation.url, requests.acceptInvitation.method, invitation.id)\r\n                .catch(err => console.log(err))\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Приглашение</DialogTitle>\r\n                <DialogContent>\r\n                    {invitation !== null ?\r\n                        <>\r\n                            <Avatar alt={'avatar'} variant=\"rounded\" src={imgSource} className={classes.avatar}>\r\n                                <PlaceIcon fontSize={\"large\"}/>\r\n                            </Avatar>\r\n                            <List>\r\n                                <ListItem key={0} button onClick={()=>setOpenInfo(!openInfo)}>\r\n                                    <ListItemText>\r\n                                        <b>Место:</b> {invitation.place.name}\r\n                                    </ListItemText>\r\n                                    {openInfo ? <ExpandLess /> : <ExpandMore />}\r\n                                </ListItem>\r\n                                <Collapse in={openInfo} timeout=\"auto\" unmountOnExit>\r\n                                    <List component=\"div\" disablePadding>\r\n                                        <ListItem>\r\n                                            <ListItemText>\r\n                                                <b>Адрес:</b> {invitation.place.country}, {invitation.place.region},\r\n                                                {invitation.place.town}, ул. {invitation.place.street}, д. {invitation.place.house},\r\n                                                к. {invitation.place.apartment}, индекс - {invitation.place.mailIndex}\r\n                                            </ListItemText>\r\n                                        </ListItem>\r\n                                        <ListItem>\r\n                                            <ListItemText><b>Кухня:</b> {invitation.place.cuisineNationality}</ListItemText>\r\n                                        </ListItem>\r\n                                        <ListItem>\r\n                                            <ListItemText><b>Интерьер:</b> {invitation.place.interior}</ListItemText>\r\n                                        </ListItem>\r\n                                        <ListItem>\r\n                                            <ListItemText><b>Посещений:</b> {visits}</ListItemText>\r\n                                        </ListItem>\r\n                                        <ListItem>\r\n                                            <ListItemText><b>Рейтинг:</b> {rating === -1 ? 'нет оценок' : rating}</ListItemText>\r\n                                        </ListItem>\r\n                                    </List>\r\n                                </Collapse>\r\n                                <Divider />\r\n                                <ListItem key={1}>\r\n                                    <ListItemText><b>Дата и время встречи:</b> {invitation.dateTime}</ListItemText>\r\n                                </ListItem>\r\n                                <Divider />\r\n                                <ListItem key={2}>\r\n                                    <ListItemText><b>Оплата:</b> {invitation.whoWillPay === 1 ?'создатель':'раздельно'}</ListItemText>\r\n                                </ListItem>\r\n                                <Divider />\r\n                                <ListItem key={3}>\r\n                                    <ListItemText><b>Сообщение:</b> {invitation.message}</ListItemText>\r\n                                </ListItem>\r\n                                <Divider />\r\n                                <ListItem key={4}>\r\n                                    <ListItemText><b>Создатель:</b> {invitation.sender}</ListItemText>\r\n                                </ListItem>\r\n                                <Divider />\r\n                                <ListItem key={5}>\r\n                                    <ListItemText><b>Получатель:</b> {invitation.recipient}</ListItemText>\r\n                                </ListItem>\r\n                            </List>\r\n                        </>\r\n                        : ''}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => onClose()} color=\"primary\"> Отмена </Button>\r\n                    <Button color=\"primary\" onClick={handleAcceptInvitation}> Принять приглашение </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\HomePage\\DeleteInvitation.tsx",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":14,"column":18,"nodeType":"114","messageId":"115","endLine":14,"endColumn":24},{"ruleId":"116","severity":1,"message":"117","line":26,"column":8,"nodeType":"118","endLine":26,"endColumn":10,"suggestions":"119"},{"ruleId":"112","severity":1,"message":"120","line":1,"column":29,"nodeType":"114","messageId":"115","endLine":1,"endColumn":39},{"ruleId":"112","severity":1,"message":"121","line":8,"column":9,"nodeType":"114","messageId":"115","endLine":8,"endColumn":17},{"ruleId":"112","severity":1,"message":"122","line":10,"column":9,"nodeType":"114","messageId":"115","endLine":10,"endColumn":20},{"ruleId":"116","severity":1,"message":"123","line":94,"column":8,"nodeType":"118","endLine":94,"endColumn":16,"suggestions":"124"},{"ruleId":"116","severity":1,"message":"125","line":98,"column":8,"nodeType":"118","endLine":98,"endColumn":20,"suggestions":"126"},{"ruleId":"108","replacedBy":"127"},{"ruleId":"110","replacedBy":"128"},{"ruleId":"112","severity":1,"message":"129","line":23,"column":12,"nodeType":"114","messageId":"115","endLine":23,"endColumn":21},{"ruleId":"112","severity":1,"message":"130","line":1,"column":16,"nodeType":"114","messageId":"115","endLine":1,"endColumn":27},{"ruleId":"112","severity":1,"message":"131","line":26,"column":9,"nodeType":"114","messageId":"115","endLine":26,"endColumn":22},{"ruleId":"112","severity":1,"message":"132","line":28,"column":8,"nodeType":"114","messageId":"115","endLine":28,"endColumn":21},{"ruleId":"116","severity":1,"message":"133","line":79,"column":8,"nodeType":"118","endLine":79,"endColumn":10,"suggestions":"134"},{"ruleId":"116","severity":1,"message":"117","line":91,"column":8,"nodeType":"118","endLine":91,"endColumn":16,"suggestions":"135"},{"ruleId":"116","severity":1,"message":"136","line":86,"column":8,"nodeType":"118","endLine":86,"endColumn":16,"suggestions":"137"},{"ruleId":"116","severity":1,"message":"138","line":48,"column":8,"nodeType":"118","endLine":48,"endColumn":14,"suggestions":"139"},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"@typescript-eslint/no-unused-vars","'isAuth' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'request', 'setIsAuth', and 'setUser'. Either include them or remove the dependency array.","ArrayExpression",["142"],"'useContext' is defined but never used.","'observer' is defined but never used.","'UserContext' is defined but never used.","React Hook useEffect has missing dependencies: 'filterOn', 'filterValue', 'isByRecipient', 'isBySender', 'request', and 'user.user.id'. Either include them or remove the dependency array.",["143"],"React Hook useEffect has a missing dependency: 'openDelete'. Either include it or remove the dependency array.",["144"],["140"],["141"],"'setIsAuth' is assigned a value but never used.","'ChangeEvent' is defined but never used.","'UserInterface' is defined but never used.","'DialogActions' is defined but never used.","React Hook useEffect has a missing dependency: 'user.avatar'. Either include it or remove the dependency array.",["145"],["146"],"React Hook useEffect has missing dependencies: 'filterValue', 'request', and 'selectFilterValue'. Either include them or remove the dependency array.",["147"],"React Hook useEffect has missing dependencies: 'invitation' and 'request'. Either include them or remove the dependency array.",["148"],"no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},"Update the dependencies array to be: [request, setIsAuth, setUser]",{"range":"163","text":"164"},"Update the dependencies array to be: [filterOn, filterValue, isByRecipient, isBySender, request, update, user.user.id]",{"range":"165","text":"166"},"Update the dependencies array to be: [openAccept, openDelete]",{"range":"167","text":"168"},"Update the dependencies array to be: [user.avatar]",{"range":"169","text":"170"},"Update the dependencies array to be: [request, setIsAuth, setUser, update]",{"range":"171","text":"172"},"Update the dependencies array to be: [filterValue, request, selectFilterValue, update]",{"range":"173","text":"174"},"Update the dependencies array to be: [invitation, open, request]",{"range":"175","text":"176"},[981,983],"[request, setIsAuth, setUser]",[4026,4034],"[filterOn, filterValue, isByRecipient, isBySender, request, update, user.user.id]",[4115,4127],"[openAccept, openDelete]",[2773,2775],"[user.avatar]",[3172,3180],"[request, setIsAuth, setUser, update]",[3280,3288],"[filterValue, request, selectFilterValue, update]",[2157,2163],"[invitation, open, request]"]