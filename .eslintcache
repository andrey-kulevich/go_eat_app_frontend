[{"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\index.tsx":"1","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\App.tsx":"3","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\UserProvider.ts":"4","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\store\\UserMob.ts":"5","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\CustomThemeProvider.ts":"6","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useRoutes.tsx":"7","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useHttp.ts":"8","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\paths.ts":"9","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\HomePage.tsx":"10","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\LoginPage.tsx":"11","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\WaitingPage.tsx":"12","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\requests.ts":"13","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\CustomSnackbar.tsx":"14","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\Header.tsx":"15","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\ExitBtn.tsx":"16"},{"size":480,"mtime":1609190110203,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":460,"mtime":1609179805405,"results":"20","hashOfConfig":"18"},{"size":197,"mtime":1609190110161,"results":"21","hashOfConfig":"18"},{"size":839,"mtime":1609190110172,"results":"22","hashOfConfig":"18"},{"size":314,"mtime":1609197422743,"results":"23","hashOfConfig":"18"},{"size":1709,"mtime":1609224870993,"results":"24","hashOfConfig":"18"},{"size":1137,"mtime":1609232888109,"results":"25","hashOfConfig":"18"},{"size":220,"mtime":1609197236374,"results":"26","hashOfConfig":"18"},{"size":9765,"mtime":1609235105193,"results":"27","hashOfConfig":"18"},{"size":4718,"mtime":1609235105177,"results":"28","hashOfConfig":"18"},{"size":822,"mtime":1609180849315,"results":"29","hashOfConfig":"18"},{"size":3436,"mtime":1609186382838,"results":"30","hashOfConfig":"18"},{"size":777,"mtime":1609181150594,"results":"31","hashOfConfig":"18"},{"size":1955,"mtime":1609225918645,"results":"32","hashOfConfig":"18"},{"size":1987,"mtime":1609223137518,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"umqtzy",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\index.tsx",[],["68","69"],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\App.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\UserProvider.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\store\\UserMob.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\context\\CustomThemeProvider.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useRoutes.tsx",["70","71","72","73","74","75"],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\hooks\\useHttp.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\paths.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\HomePage.tsx",["76","77"],"import React, {ChangeEvent, useContext, useEffect, useState} from \"react\";\r\nimport Header from \"../components/Header/Header\";\r\nimport {\r\n    Container, createStyles, Typography, Grid, Checkbox, TextField,\r\n    Paper, FormControlLabel, FormControl, InputLabel, Select, MenuItem,\r\n    TableCell, TableBody, TableHead, TableContainer, TableRow, Table, Button\r\n} from \"@material-ui/core\";\r\nimport {useObserver} from \"mobx-react-lite\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {UserContext} from \"../context/UserProvider\";\r\nimport {useHttp} from \"../hooks/useHttp\";\r\nimport {requests} from \"../helpers/requests\";\r\nimport {InvitationInterface} from \"../interfaces/InvitationInterface\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxHeight: 500,\r\n            minHeight: 300,\r\n            backgroundColor: theme.palette.background.paper,\r\n            overflow: 'auto',\r\n        },\r\n        paper: {\r\n            margin: theme.spacing(5, 0),\r\n            minHeight: 300,\r\n            padding: theme.spacing(2)\r\n        },\r\n        grid: {\r\n            marginBottom: theme.spacing(2)\r\n        },\r\n        gridFilters: {\r\n            marginBottom: theme.spacing(2),\r\n            marginLeft: theme.spacing(2)\r\n        },\r\n        emptyText: {\r\n            textAlign: 'center',\r\n            color: theme.palette.text.disabled\r\n        },\r\n        formControl: {\r\n            paddingBottom: '24px',\r\n            marginLeft: theme.spacing(2),\r\n            marginRight: theme.spacing(2),\r\n            minWidth: 195,\r\n            width: '10%'\r\n        },\r\n        valueField: {\r\n            marginRight: theme.spacing(3),\r\n        },\r\n        submit: {\r\n\r\n        }\r\n    }),\r\n);\r\n\r\nexport const HomePage = () => {\r\n    const classes = useStyles();\r\n    const {user} = useContext(UserContext)\r\n    const {request} = useHttp()\r\n    const [invitations, setInvitations] = useState<InvitationInterface[]>([])\r\n    const [filterOn, setFilterOn] = useState<string>('country')\r\n    const [filterValue, setFilterValue] = useState<string>('Россия')\r\n    const [update, setUpdate] = useState<boolean>(true)\r\n    const [isBySender, setIsBySender] = useState<boolean>(false)\r\n    const [isByRecipient, setIsByRecipient] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        if (!isByRecipient && !isBySender) {\r\n            request(requests.getInvitationsByLocation.url(filterOn, filterValue),\r\n                requests.getInvitationsByLocation.method, null)\r\n                .then(data => {setInvitations(data as InvitationInterface[])})\r\n        } else if (isBySender) {\r\n            request(requests.getInvitationsMadeByPerson.url(1), requests.getPersonalInvitations.method, null)\r\n                .then(data => {setInvitations(data as InvitationInterface[])})\r\n        } else if (isByRecipient) {\r\n            request(requests.getPersonalInvitations.url(1), requests.getPersonalInvitations.method, null)\r\n                .then(data => {setInvitations(data as InvitationInterface[])})\r\n        }\r\n\r\n        setUpdate(false)\r\n    }, [update])\r\n\r\n    const handleFilterChange = (event: ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        setFilterOn(event.target.value as string)\r\n    }\r\n\r\n    const handleFilterValueChange = (event : ChangeEvent<HTMLInputElement>) => {\r\n        setFilterValue(event.target.value as string)\r\n    }\r\n\r\n    return useObserver(() => (\r\n        <>\r\n            <Header/>\r\n            <Container>\r\n                <Paper className={classes.paper} elevation={5}>\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        spacing={2}\r\n                        className={classes.grid}\r\n                    >\r\n                        <Grid item> <Typography variant={\"h5\"}> Список приглашений </Typography> </Grid>\r\n                        <Grid item> </Grid>\r\n                    </Grid>\r\n                    <Typography variant={\"h6\"} className={classes.gridFilters}> Фильтры </Typography>\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        className={classes.gridFilters}>\r\n                        <FormControlLabel\r\n                            control={<Checkbox\r\n                                checked={isBySender}\r\n                                onChange={()=>{\r\n                                    setIsBySender(!isBySender)\r\n                                    setIsByRecipient(false)\r\n                                }}\r\n                                color={\"primary\"}\r\n                            />}\r\n                            label=\"Опубликованные мной\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Checkbox\r\n                                checked={isByRecipient}\r\n                                onChange={()=>{\r\n                                    setIsByRecipient(!isByRecipient)\r\n                                    setIsBySender(false)\r\n                                }}\r\n                                color={\"primary\"}\r\n                            />}\r\n                            label=\"Приглашения для меня\"\r\n                        />\r\n                        <FormControl className={classes.formControl} disabled={isByRecipient || isBySender}>\r\n                            <InputLabel id=\"demo-simple-select-label\">Фильтровать по</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                value={filterOn}\r\n                                onChange={handleFilterChange}\r\n                            >\r\n                                <MenuItem key={1} value={'country'}>Страна</MenuItem>\r\n                                <MenuItem key={2} value={'region'}>Область</MenuItem>\r\n                                <MenuItem key={3} value={'town'}>Город</MenuItem>\r\n                                <MenuItem key={4} value={'street'}>Улица</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <TextField\r\n                            label=\"Значение\"\r\n                            disabled={isByRecipient || isBySender}\r\n                            className={classes.valueField}\r\n                            onChange={handleFilterValueChange}\r\n                        />\r\n                        <Button\r\n                            color={'primary'}\r\n                            onClick={()=>setUpdate(true)}\r\n                            className={classes.submit}\r\n                        >\r\n                            Обновить\r\n                        </Button>\r\n                    </Grid>\r\n                    <TableContainer >\r\n                        <Table size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Дата</TableCell>\r\n                                    <TableCell>Место</TableCell>\r\n                                    <TableCell>Кто платит</TableCell>\r\n                                    <TableCell>Сообщение</TableCell>\r\n                                    <TableCell>Создатель</TableCell>\r\n                                    <TableCell>Получатель</TableCell>\r\n                                    <TableCell>Принято</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {invitations.length > 0 ?\r\n                                    (invitations.map((elem, index) => (\r\n                                        <TableRow key={index}>\r\n                                            <TableCell>{elem.dateTime}</TableCell>\r\n                                            <TableCell>{elem.place.name}</TableCell>\r\n                                            <TableCell>{elem.whoWillPay === 1 ?'создатель':'получатель'}</TableCell>\r\n                                            <TableCell>{elem.message}</TableCell>\r\n                                            <TableCell>{elem.sender}</TableCell>\r\n                                            <TableCell>{elem.recipient}</TableCell>\r\n                                            <TableCell>\r\n                                                <Checkbox\r\n                                                    checked={elem.accepted}\r\n                                                    //onChange={leftHandChange}\r\n                                                    color={\"primary\"}\r\n                                                />\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )))\r\n                                    :\r\n                                    <Typography variant={\"h6\"} className={classes.gridFilters}>\r\n                                        Упс! Ничего не найдено!\r\n                                    </Typography>\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Paper>\r\n            </Container>\r\n        </>\r\n    ))\r\n}\r\n","C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\LoginPage.tsx",["78"],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\pages\\WaitingPage.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\helpers\\requests.ts",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\CustomSnackbar.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\tihom\\Documents\\go_eat_app_frontend\\src\\components\\Header\\ExitBtn.tsx",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":8,"column":9,"nodeType":"85","messageId":"86","endLine":8,"endColumn":17},{"ruleId":"83","severity":1,"message":"87","line":14,"column":12,"nodeType":"85","messageId":"86","endLine":14,"endColumn":16},{"ruleId":"83","severity":1,"message":"88","line":14,"column":18,"nodeType":"85","messageId":"86","endLine":14,"endColumn":24},{"ruleId":"83","severity":1,"message":"89","line":15,"column":12,"nodeType":"85","messageId":"86","endLine":15,"endColumn":19},{"ruleId":"83","severity":1,"message":"90","line":16,"column":12,"nodeType":"85","messageId":"86","endLine":16,"endColumn":16},{"ruleId":"91","severity":1,"message":"92","line":22,"column":8,"nodeType":"93","endLine":22,"endColumn":38},{"ruleId":"83","severity":1,"message":"87","line":58,"column":12,"nodeType":"85","messageId":"86","endLine":58,"endColumn":16},{"ruleId":"91","severity":1,"message":"94","line":84,"column":8,"nodeType":"95","endLine":84,"endColumn":16,"suggestions":"96"},{"ruleId":"83","severity":1,"message":"87","line":45,"column":12,"nodeType":"85","messageId":"86","endLine":45,"endColumn":16},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"@typescript-eslint/no-unused-vars","'requests' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'isAuth' is assigned a value but never used.","'request' is assigned a value but never used.","'rand' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has missing dependencies: 'filterOn', 'filterValue', 'isByRecipient', 'isBySender', and 'request'. Either include them or remove the dependency array.","ArrayExpression",["99"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},"Update the dependencies array to be: [filterOn, filterValue, isByRecipient, isBySender, request, update]",{"range":"102","text":"103"},[3193,3201],"[filterOn, filterValue, isByRecipient, isBySender, request, update]"]